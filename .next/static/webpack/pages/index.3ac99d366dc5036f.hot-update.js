"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _gatefi_js_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gatefi/js-sdk */ \"./node_modules/@gatefi/js-sdk/dist/gateFiSDK.js\");\n/* harmony import */ var _gatefi_js_sdk__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gatefi_js_sdk__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\n\nvar _s = $RefreshSig$();\n\n\n\nconst HomePage = ()=>{\n    _s();\n    const instanceSDK = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)();\n    const [cryptoWidget, setCryptoWidget] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const [showIframe, setShowIframe] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false) // state to control iframe visibility\n    ;\n    const [quotes, setQuotes] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const [apiResponse, setApiResponse] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const [showApiResponse, setShowApiResponse] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(true);\n    const [showQuotesResponse, setShowQuotesResponse] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(true);\n    const [customOrderId, setCustomOrderId] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [walletAddress, setWalletAddress] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [singleOrderResponse, setSingleOrderResponse] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const [showSingleOrderResponse, setShowSingleOrderResponse] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [config, setConfig] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const [isOverlayVisible, setIsOverlayVisible] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const overlayInstanceSDK = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const embedInstanceSDK = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        return ()=>{\n            var _overlayInstanceSDK_current, _embedInstanceSDK_current;\n            (_overlayInstanceSDK_current = overlayInstanceSDK.current) === null || _overlayInstanceSDK_current === void 0 ? void 0 : _overlayInstanceSDK_current.destroy();\n            overlayInstanceSDK.current = null;\n            (_embedInstanceSDK_current = embedInstanceSDK.current) === null || _embedInstanceSDK_current === void 0 ? void 0 : _embedInstanceSDK_current.destroy();\n            embedInstanceSDK.current = null;\n        };\n    }, []);\n    // State to hold the form values\n    // Initial state for the form\n    const [form, setForm] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        amount: \"100\",\n        crypto: \"ETH\",\n        fiat: \"USD\",\n        partnerAccountId: \"9e34f479-b43a-4372-8bdf-90689e16cd5b\",\n        payment: \"BANKCARD\",\n        region: \"US\"\n    });\n    const [orderParams, setOrderParams] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        start: \"2023-07-22\",\n        end: \"2024-08-22\",\n        limit: \"5\",\n        skip: \"0\"\n    });\n    // Event handler for custom order ID field\n    const handleCustomOrderIdChange = (e)=>{\n        setCustomOrderId(e.target.value);\n    };\n    // Event handler for wallet address field\n    const handleWalletAddressChange = (e)=>{\n        setWalletAddress(e.target.value);\n    };\n    let secretkey = \"GSLDrYtqLmXDJRHbqtUwDQLwKBbEgPvu\";\n    let prodSecretkey = \"xxxx\";\n    //string will be method + api path\n    let dataVerify = \"GET\" + \"/onramp/v1/configuration\";\n    let dataVerify1 = \"GET\" + \"/onramp/v1/quotes\";\n    let dataVerify2 = \"GET\" + \"/onramp/v1/orders\";\n    let dataVerify3 = \"GET\" + \"/onramp/v1/orders/184f5c5a1c25fd89536a00b626e9f44a6decbe10ab806292ccd4e5a5e199b496\";\n    let dataVerify4 = \"GET\" + \"/onramp/v1/buy\";\n    let GetOrdersPath = \"GET\" + \"/onramp/v1/orders\";\n    // Hash the secret key with the data\n    function calcAuthSigHash(data, key) {\n        const hmac = crypto__WEBPACK_IMPORTED_MODULE_3___default().createHmac(\"sha256\", key);\n        hmac.update(data);\n        return hmac.digest(\"hex\");\n    }\n    // Hash the secret key with the data\n    function calcAuthSigHashProd(data) {\n        const hmac = crypto__WEBPACK_IMPORTED_MODULE_3___default().createHmac(\"sha256\", prodSecretkey);\n        hmac.update(data);\n        return hmac.digest(\"hex\");\n    }\n    console.log(calcAuthSigHash(dataVerify, secretkey));\n    // console.log('Quotes Sig Test', calcAuthSigHash(dataVerify1))\n    // console.log(calcAuthSigHash(dataVerify2))\n    console.log(\"get single order\", calcAuthSigHashProd(dataVerify3));\n    console.log(\"API BUY PROD\", calcAuthSigHashProd(dataVerify4));\n    console.log(\"QUOOOTES PROODDDD\", calcAuthSigHashProd(dataVerify1));\n    // console.log('Prod get quotes',calcAuthSigHashProd(dataVerify1))\n    // console.log('Prod buy Asset',calcAuthSigHashProd(dataVerify4))\n    // console.log('Config Prod',calcAuthSigHashProd(dataVerify))\n    console.log(\"Config Prod\", calcAuthSigHashProd(dataVerify));\n    console.log(\"Get Orders Prod\", calcAuthSigHashProd(GetOrdersPath));\n    let signatureConfig = calcAuthSigHash(dataVerify, secretkey);\n    let signature = calcAuthSigHash(dataVerify4, secretkey);\n    let signature1 = calcAuthSigHash(dataVerify1, secretkey);\n    let signature2 = calcAuthSigHash(dataVerify2, secretkey);\n    let signature3 = calcAuthSigHash(dataVerify3, secretkey);\n    let signatureBuyAssetProd = calcAuthSigHashProd(dataVerify4);\n    let signatureQuotesProd = calcAuthSigHashProd(dataVerify1);\n    const handleOrderParamChange = (e)=>{\n        setOrderParams({\n            ...orderParams,\n            [e.target.name]: e.target.value\n        });\n    };\n    const getConfig = async ()=>{\n        const queryString = new URLSearchParams(form).toString();\n        const response = await fetch(\"/api/proxy?endpoint=/onramp/v1/configuration\", {\n            method: \"GET\",\n            headers: {\n                \"access-control-allow-headers\": \"Accept\",\n                \"signature\": signatureConfig,\n                \"api-key\": \"VrHPdUXBsiGtIoWXTGrqqAwmFalpepUq\"\n            }\n        });\n        const data = await response.json();\n        setConfig(data);\n    };\n    const getOrders = async (params)=>{\n        const response = await fetch(\"/api/proxy?endpoint=/onramp/v1/orders&\".concat(params), {\n            method: \"GET\",\n            redirect: \"follow\",\n            headers: {\n                \"access-control-allow-headers\": \"Accept\",\n                \"signature\": signature2,\n                \"api-key\": \"VrHPdUXBsiGtIoWXTGrqqAwmFalpepUq\"\n            }\n        });\n        const data = await response.json();\n        setApiResponse(data);\n        setShowApiResponse(true); // Add this line\n        return data;\n    };\n    const handleOrderFormSubmit = (e)=>{\n        e.preventDefault();\n        const params = new URLSearchParams(orderParams).toString();\n        getOrders(params);\n    };\n    // Function to get single order\n    const getSingleOrder = async (e)=>{\n        e.preventDefault();\n        let dataVerify3 = \"GET\" + \"/onramp/v1/orders/\".concat(customOrderId);\n        let signature3 = calcAuthSigHash(dataVerify3, secretkey);\n        const response = await fetch(\"/api/proxy?endpoint=/onramp/v1/orders/\".concat(customOrderId, \"&walletAddress=\").concat(walletAddress), {\n            method: \"GET\",\n            redirect: \"follow\",\n            headers: {\n                \"access-control-allow-headers\": \"Accept\",\n                \"signature\": signature3,\n                \"api-key\": \"VrHPdUXBsiGtIoWXTGrqqAwmFalpepUq\"\n            }\n        });\n        const data = await response.json();\n        setSingleOrderResponse(data);\n        setShowSingleOrderResponse(true);\n        return data;\n    };\n    //TEST NET\n    const getQuotes = async ()=>{\n        // Build the URL query string from the form values\n        const queryString = new URLSearchParams(form).toString();\n        const response = await fetch(\"/api/proxy?endpoint=/onramp/v1/quotes&\".concat(queryString), {\n            method: \"GET\",\n            redirect: \"follow\",\n            headers: {\n                \"access-control-allow-headers\": \"Accept\",\n                \"signature\": signature1,\n                \"api-key\": \"VrHPdUXBsiGtIoWXTGrqqAwmFalpepUq\"\n            }\n        });\n        const data = await response.json(); // You probably want the JSON response, not the URL\n        setQuotes(data);\n    };\n    const buyAssetAPI = async ()=>{\n        var _instanceSDK_current, _instanceSDK;\n        (_instanceSDK = instanceSDK) === null || _instanceSDK === void 0 ? void 0 : (_instanceSDK_current = _instanceSDK.current) === null || _instanceSDK_current === void 0 ? void 0 : _instanceSDK_current.show();\n        const randomString = (__webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\").randomBytes)(32).toString(\"hex\");\n        // Open a blank window immediately\n        const newWindow = window.open(\"\", \"_blank\");\n        const response = await fetch(\"/api/proxy?endpoint=/onramp/v1/buy&amount=43&crypto=ETH&fiat=USD&orderCustomId=\".concat(randomString, \"&partnerAccountId=9e34f479-b43a-4372-8bdf-90689e16cd5b&payment=BANKCARD&redirectUrl=https://www.citadel.com/&region=US&walletAddress=0xc458f721D11322E36f781a9C58055de489178BF2\"), {\n            redirect: \"follow\",\n            headers: {\n                \"api-key\": \"VrHPdUXBsiGtIoWXTGrqqAwmFalpepUq\",\n                \"signature\": signature\n            }\n        });\n        console.log(\"Response Headers:\", [\n            ...response.headers\n        ]);\n        console.log(\"signature signature signature signature signature\", signature);\n        const externalApiUrl = response.headers.get(\"X-External-Api-Url\");\n        if (externalApiUrl && newWindow) {\n            newWindow.location.href = externalApiUrl;\n        } else if (response.ok) {\n            const finalUrl = response.headers.get(\"X-Final-Url\");\n            if (finalUrl && newWindow) {\n                newWindow.location.href = finalUrl;\n            }\n        } else {\n            const data = await response.json();\n            setCryptoWidget(data);\n        }\n    };\n    // Handle form submission\n    const handleSubmit = (event)=>{\n        event.preventDefault();\n        getQuotes();\n        setShowQuotesResponse(true);\n    };\n    // Handle form field changes\n    const handleChange = (event)=>{\n        setForm({\n            ...form,\n            [event.target.name]: event.target.value\n        });\n    };\n    // 2. Use useEffect to call getQuotes when the component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        getQuotes().then((data)=>{\n            // 3. Set the response to the quotes state variable\n            setQuotes(data);\n        });\n    }, []);\n    const handleOnClick = ()=>{\n        var _overlayInstanceSDK_current;\n        if (overlayInstanceSDK.current) {\n            if (isOverlayVisible) {\n                overlayInstanceSDK.current.hide();\n                setIsOverlayVisible(false);\n            } else {\n                overlayInstanceSDK.current.show();\n                setIsOverlayVisible(true);\n            }\n        } else {\n            const randomString = (__webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\").randomBytes)(32).toString(\"hex\");\n            overlayInstanceSDK.current = new _gatefi_js_sdk__WEBPACK_IMPORTED_MODULE_1__.GateFiSDK({\n                merchantId: \"9e34f479-b43a-4372-8bdf-90689e16cd5b\",\n                displayMode: _gatefi_js_sdk__WEBPACK_IMPORTED_MODULE_1__.GateFiDisplayModeEnum.Overlay,\n                nodeSelector: \"#overlay-button\",\n                isSandbox: true,\n                walletAddress: \"0xc458f721D11322E36f781a9C58055de489178BF2\",\n                email: \"test@tester.com\",\n                externalId: randomString,\n                defaultFiat: {\n                    currency: \"USD\",\n                    amount: \"64\"\n                },\n                defaultCrypto: {\n                    currency: \"ETH\"\n                }\n            });\n        }\n        (_overlayInstanceSDK_current = overlayInstanceSDK.current) === null || _overlayInstanceSDK_current === void 0 ? void 0 : _overlayInstanceSDK_current.show();\n        setIsOverlayVisible(true);\n    };\n    const handleOnClickProd = ()=>{\n        var _overlayInstanceSDK_current;\n        if (overlayInstanceSDK.current) {\n            if (isOverlayVisible) {\n                overlayInstanceSDK.current.hide();\n                setIsOverlayVisible(false);\n            } else {\n                overlayInstanceSDK.current.show();\n                setIsOverlayVisible(true);\n            }\n        } else {\n            const randomString = (__webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\").randomBytes)(32).toString(\"hex\");\n            overlayInstanceSDK.current = new _gatefi_js_sdk__WEBPACK_IMPORTED_MODULE_1__.GateFiSDK({\n                merchantId: \"xxxxxxx\",\n                displayMode: _gatefi_js_sdk__WEBPACK_IMPORTED_MODULE_1__.GateFiDisplayModeEnum.Overlay,\n                nodeSelector: \"#overlay-button\",\n                email: \"test@tester.com\",\n                externalId: randomString,\n                defaultFiat: {\n                    currency: \"USD\",\n                    amount: \"11\"\n                },\n                defaultCrypto: {\n                    currency: \"USDC_SOL\"\n                }\n            });\n        }\n        (_overlayInstanceSDK_current = overlayInstanceSDK.current) === null || _overlayInstanceSDK_current === void 0 ? void 0 : _overlayInstanceSDK_current.show();\n        setIsOverlayVisible(true);\n    };\n    // Function to create a new embed SDK instance\n    const createEmbedSdkInstance = ()=>{\n        const randomString = (__webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\").randomBytes)(32).toString(\"hex\");\n        embedInstanceSDK.current = typeof document !== \"undefined\" && new _gatefi_js_sdk__WEBPACK_IMPORTED_MODULE_1__.GateFiSDK({\n            merchantId: \"9e34f479-b43a-4372-8bdf-90689e16cd5b\",\n            displayMode: _gatefi_js_sdk__WEBPACK_IMPORTED_MODULE_1__.GateFiDisplayModeEnum.Embedded,\n            nodeSelector: \"#embed-button\",\n            isSandbox: true,\n            walletAddress: \"0xc458f721D11322E36f781a9C58055de489178BF2\",\n            email: \"test@tester.com\",\n            externalId: randomString,\n            defaultFiat: {\n                currency: \"USD\",\n                amount: \"30\"\n            },\n            defaultCrypto: {\n                currency: \"ETH\"\n            }\n        });\n    };\n    const handleOnClickEmbed = ()=>{\n        if (showIframe) {\n            var _embedInstanceSDK_current;\n            (_embedInstanceSDK_current = embedInstanceSDK.current) === null || _embedInstanceSDK_current === void 0 ? void 0 : _embedInstanceSDK_current.hide();\n            setShowIframe(false);\n        } else {\n            var _embedInstanceSDK_current1;\n            if (!embedInstanceSDK.current) {\n                createEmbedSdkInstance();\n            }\n            (_embedInstanceSDK_current1 = embedInstanceSDK.current) === null || _embedInstanceSDK_current1 === void 0 ? void 0 : _embedInstanceSDK_current1.show();\n            setShowIframe(true);\n        }\n    };\n    const handleCloseEmbed = ()=>{\n        var _embedInstanceSDK_current;\n        (_embedInstanceSDK_current = embedInstanceSDK.current) === null || _embedInstanceSDK_current === void 0 ? void 0 : _embedInstanceSDK_current.destroy();\n        embedInstanceSDK.current = null;\n        setShowIframe(false);\n    };\n    const handleHostedFlowClick = ()=>{\n        const url = \"https://onramp-sandbox.gatefi.com/?merchantId=9e34f479-b43a-4372-8bdf-90689e16cd5b&lang=es_PE\";\n        window.open(url, \"_blank\");\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, void 0, false);\n};\n_s(HomePage, \"8Xk18XmljbX/B2ciYB+xPNqKTW0=\");\n_c = HomePage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (HomePage);\nvar _c;\n$RefreshReg$(_c, \"HomePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.tsx\n"));

/***/ })

});